apiVersion: placement.openstack.org/v1beta1
kind: PlacementAPI
metadata:
  finalizers:
  - PlacementAPI
  name: placement
spec:
  customServiceConfig: |
    [DEFAULT]
    debug = true
  databaseInstance: openstack
  databaseUser: placement
  debug:
    dbSync: false
    service: false
  passwordSelectors:
    database: PlacementDatabasePassword
    service: PlacementPassword
  preserveJobs: false
  replicas: 1
  secret: osp-secret
  serviceUser: placement
status:
  databaseHostname: openstack
  readyCount: 1
  conditions:
  - message: Setup complete
    reason: Ready
    status: "True"
    type: Ready
  - message: DB create completed
    reason: Ready
    status: "True"
    type: DBReady
  - message: DBsync completed
    reason: Ready
    status: "True"
    type: DBSyncReady
  - message: Deployment completed
    reason: Ready
    status: "True"
    type: DeploymentReady
  - message: Exposing service completed
    reason: Ready
    status: "True"
    type: ExposeServiceReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: InputReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: KeystoneEndpointReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: KeystoneServiceReady
  - message: NetworkAttachments completed
    reason: Ready
    status: "True"
    type: NetworkAttachmentsReady
  - message: RoleBinding created
    reason: Ready
    status: "True"
    type: RoleBindingReady
  - message: Role created
    reason: Ready
    status: "True"
    type: RoleReady
  - message: ServiceAccount created
    reason: Ready
    status: "True"
    type: ServiceAccountReady
  - message: Service config create completed
    reason: Ready
    status: "True"
    type: ServiceConfigReady
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: placement
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: placement
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - placement
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - -c
        - /usr/local/bin/kolla_set_configs && /usr/local/bin/kolla_start
        command:
        - /bin/bash
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8778
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 5
        name: placement-api
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8778
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
      initContainers:
      - args:
        - -c
        - /usr/local/bin/container-scripts/init.sh
        command:
        - /bin/bash
        env:
        - name: DatabasePassword
          valueFrom:
            secretKeyRef:
              key: PlacementDatabasePassword
              name: osp-secret
        - name: PlacementPassword
          valueFrom:
            secretKeyRef:
              key: PlacementPassword
              name: osp-secret
        - name: DatabaseHost
          value: openstack
        - name: DatabaseName
          value: placement
        - name: DatabaseUser
          value: placement
        imagePullPolicy: IfNotPresent
        name: init
        resources: {}
      restartPolicy: Always
      securityContext: {}
      serviceAccount: placement-placement
      serviceAccountName: placement-placement
status:
  availableReplicas: 1
  replicas: 1
---
# the openshift annotations can't be checked through the deployment above
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: anyuid
  labels:
    service: placement
status:
  phase: Running
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: internal
    service: placement
  name: placement-internal
spec:
  ports:
    - name: placement-internal
  selector:
    service: placement
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: public
    service: placement
  name: placement-public
spec:
  ports:
    - name: placement-public
  selector:
    service: placement
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    placement.openstack.org/name: placement
  name: placement-scripts
  ownerReferences:
  - blockOwnerDeletion: true
    controller: true
    kind: PlacementAPI
    name: placement
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    placement.openstack.org/name: placement
  name: placement-config-data
  ownerReferences:
  - blockOwnerDeletion: true
    controller: true
    kind: PlacementAPI
    name: placement
---
apiVersion: keystone.openstack.org/v1beta1
kind: KeystoneEndpoint
metadata:
  name: placement
  ownerReferences:
  - apiVersion: placement.openstack.org/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: PlacementAPI
    name: placement
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
type: Opaque
# Generated key/crt pair sorely for testing purposes
# CA certificates are generally provided within the bundle file
data:
  ca.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmVENDQVNLZ0F3SUJBZ0lRUHhtRFFscmxjNTNhb215RVU5MU9pakFLQmdncWhra
    k9QUVFEQWpBZU1Sd3cKR2dZRFZRUURFeE5yZFhSMGJDMXpaV3htYzJsbmJtVmtMV05oTUI0WERUSXpNVEF4T0RFeU1EazFNMW9YRFRJMA
    pNREV4TmpFeU1EazFNMW93SGpFY01Cb0dBMVVFQXhNVGEzVjBkR3d0YzJWc1puTnBaMjVsWkMxallUQlpNQk1HCkJ5cUdTTTQ5QWdFR0N
    DcUdTTTQ5QXdFSEEwSUFCSVdJY0JiR0cveEg4Lzlkc2lMbkJCdnRqcEZoQ2JRM3U4R0EKZXBVcnhTY25XM0hrZ2hrc1BCVE12M3NCeGdn
    VFQwL0Eva0dtazRYTkJ0dElnbUZJaFBpalFqQkFNQTRHQTFVZApEd0VCL3dRRUF3SUNwREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQ
    TFVZERnUVdCQlFKaDd3VklFYjgxcFlsCkl3RDAraTBwSnlCTjNqQUtCZ2dxaGtqT1BRUURBZ05KQURCR0FpRUF2a3h5RzZjNzltSDlRWH
    RIVWFSM014REkKUUVRRGVtL1hZR3VGY1ZCUDJpQUNJUUNFeEZqeStQUTBkNFU5dEJacTVOd1gzdmxibnQxVlNCYWE5VFIrNkNkbAozdz0
    9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURhekNDQXhDZ0F3SUJBZ0lRUWw2bjhlS21BbXZlbDhZTGhIaFVjREFLQmdncWhra
    k9QUVFEQWpBZU1Sd3cKR2dZRFZRUURFeE5yZFhSMGJDMXpaV3htYzJsbmJtVmtMV05oTUI0WERUSXpNVEF5TXpBNE16UTBNRm9YRFRJMQ
    pNRFF3TlRBNE16UTBNRm93TXpFV01CUUdBMVVFQ2hNTlkyeDFjM1JsY2k1c2IyTmhiREVaTUJjR0ExVUVBeE1RCmIzQmxibk4wWVdOckx
    XZGhiR1Z5WVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU9QMnFUVkhvUmFsb1VCb0RSS1NrZExsR2Zq
    V2U2WEFFQ21HZGpRdzNjY0NHWUNKc3U3akROSFMxalJCa0ZUKwpnVERUNGk5MndPelI2WGpWQ2Fld1pCSXlyU1d4N3Y3SndaZFkvVkQzV
    WdRSFdpWEpNOFJlRFZUV0J6TjdqL3JTCktGY0lIcURGYjFGRy9jS0gzcEJrTVRReTZSZXRRdHRkTVl0bE1tVEdFdFJnQVZQdGlLTXZnMX
    ZadThUY053VEwKZ2h0cjFOdURBYzFpVXhzL1p5S0o0ZjBHNEJMVlNHNVgwRXRvVUZxcWF3R2EySGhMZld5TXEyRWdoWGE1QzZHeQoxSkd
    VYUtCZHdCMjRLd2loSVR0U1Z3SGxrK2FGQ2Nac3FzT1BuR2c4WTZRSkM1bERUeE1UWXpHN1pxaGtMVmgwClFJTUpVMnNtMEd3aENYWVlG
    OXF5c2JNQ0F3RUFBYU9DQVU0d2dnRktNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmO
    EVBakFBTUI4R0ExVWRJd1FZTUJhQUZBbUh2QlVnUnZ6VwpsaVVqQVBUNkxTa25JRTNlTUlINUJnTlZIUkVFZ2ZFd2dlNkNGMjl3Wlc1em
    RHRmpheTV2Y0dWdWMzUmhZMnN1CmMzWmpnaVZ2Y0dWdWMzUmhZMnN1YjNCbGJuTjBZV05yTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzZ2h
    JcUxtOXcKWlc1emRHRmpheTFuWVd4bGNtR0NIQ291YjNCbGJuTjBZV05yTFdkaGJHVnlZUzV2Y0dWdWMzUmhZMnVDSUNvdQpiM0JsYm5O
    MFlXTnJMV2RoYkdWeVlTNXZjR1Z1YzNSaFkyc3VjM1pqZ2lncUxtOXdaVzV6ZEdGamF5MW5ZV3hsCmNtRXViM0JsYm5OMFlXTnJMbk4yW
    Xk1amJIVnpkR1Z5Z2k0cUxtOXdaVzV6ZEdGamF5MW5ZV3hsY21FdWIzQmwKYm5OMFlXTnJMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNQW
    9HQ0NxR1NNNDlCQU1DQTBrQU1FWUNJUUNIbllHMApxWFhqVGxPSFFpaXpwdVN0NVVQc3F5UXY3eTVNVDhaZ3RxYmd3Z0loQVBRdUNWeFB
    Mb3daOGVWV3BTc09DVnNICjM0ZmFhWFFmbjVEZXE0eGFGSXFmCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRR
    Go5cWsxUjZFV3BhRkEKYUEwU2twSFM1Um40MW51bHdCQXBoblkwTU4zSEFobUFpYkx1NHd6UjB0WTBRWkJVL29FdzArSXZkc0RzMGVsNA
    oxUW1uc0dRU01xMGxzZTcreWNHWFdQMVE5MUlFQjFvbHlUUEVYZzFVMWdjemU0LzYwaWhYQ0I2Z3hXOVJSdjNDCmg5NlFaREUwTXVrWHJ
    VTGJYVEdMWlRKa3hoTFVZQUZUN1lpakw0TmIyYnZFM0RjRXk0SWJhOVRiZ3dITllsTWIKUDJjaWllSDlCdUFTMVVodVY5QkxhRkJhcW1z
    Qm10aDRTMzFzakt0aElJVjJ1UXVoc3RTUmxHaWdYY0FkdUNzSQpvU0U3VWxjQjVaUG1oUW5HYktyRGo1eG9QR09rQ1F1WlEwOFRFMk14d
    TJhb1pDMVlkRUNEQ1ZOckp0QnNJUWwyCkdCZmFzckd6QWdNQkFBRUNnZ0VBQlBwQzBaWUJ6M1BJWkphaENuSEcyMXNEU1NxdHduM0NISl
    lDQ0x1MGEvOEEKdll6RUtuRXN1M3dtRHpnTFJiL1U1Rk1NRWtzK2hTMUVNczQ4Q3J4UVF4RjJOR2VCTjNFQ1dDS3FUVlZKSml0ZQo3WXB
    LSmhTRHFBR1FZTEJuQVd3TFUzTXE4QW0vbDMrOFZMNFF2d2hoQnFuQjZ6RnVUMG5tcGd1TW9TU3VEcE1MCmh3akN6QlU3cHJ1UEJIOVNr
    WHNNKzRGeHVkOTlJMUo4YkdDeWN5Qm9OaFc4OHgwYVJ2ZU9DdVVXaHVHdjBCT3oKYkRkZXE2cEI0S0hjL3QyUmg4S05lcjVETE9YdDBae
    U96a3VMWEFQM2xzTE9mOHBOWWtHVjJ0dzBJQ3pkMndmNQphSTk4c2FDSDRuQXUyTHBEUCtkM0xmTXlML2EwamszOFVpbUs5WXBTZ1FLQm
    dRRHNndi91WGw2bTR3Qm1LemphCitLNzVXLzlnc25pK3U3MXl2NkhwZ3l3T2FsTWxIczV5bTg3blhoUFJtc3FyQlhBeG5lNW1Sb29TWjV
    hKzlLak8Ka3IwT1VXSnkrb2JQbFdmdUtVTXdLbmplVy93UUsrWlpOTGJlM0ZsRHVxM2NOczRGMHFXN2J2dHN0MURXekl4QQp5WHZUaEhx
    L3ltdGlDMXBYVENHZHN2bXV3UUtCZ1FEMnYxaEJOT09Ea1NRb1ZGZzJLQlplYmNWUzFEUjZ2VVcvCjByMEIyNjRYRzVFRXIxSkNabFUxR
    G1jR1c2ZHowVkdQeWt6VXhaa2hmZmV2SHdoNXBUZStnVndEd0huMjRFTkkKV1NIaytzbHhBUlFMbFVRakpEczdvaVhqK0ZZcjJhd0JrTW
    xjVjN4cEorN2syYTFaMVlHZnVmait3Z2FuUStDRwpJUXJaZmVaeGN3S0JnUUNFSXlCb0JkTnQrKzl5SlgzTFlSc28rQXd5OHlOZ3RMVkF
    rZTRjNzR0Q3RvYWplNVd1CkZIekJhUjg3Z1Bid0c4YTJBZDE2eUxoRlZoaXpzUzlLMGxMTDJBNWYzTFpLN2RjMkNWbWZaR3RKR0MwNHY3
    NGYKWXNNMHVma3BUUGZyeTdiSkxBb3FNUFJKcGhXRkhKelRhWDVFQzRVaytDdU1pSGs5d3F3WlZqQUhRUUtCZ1FEeQpVZDJ4UStoL1o4V
    1RtYWw3bmdqQnVabkVpMFB5bWZocXR1SUpkaDFVOGl5TDVrV3BrZWZ5RCsvYmpaMDRuNE15CjdDQmlBS0F2QlE5K09zTE8vQk52a29pej
    RvMmtobjl0Q0tQQnhReVpYczY1eFdCQ0JxM3BGWWVTaDJyUTY1Y0IKZnBoUmlGVlV5L1BQYVhyVnMxajJiT1A4Qkw0Vi9CSCtoMnFwUnZ
    4Tnd3S0JnQk82c3dJeURBYmFKc0lOS2ZBZQp3R3g5d0tkcVUyM052TG9oaEFkTVpoZ0dEcHM0Sm13TEJxYTZUb05NSzVLQUZMQzJsenBW
    T1RvWlZCQUpNVWFpCmlVblJmT0hoMjhhQWhGdHlTZ3dNcWg2M2xqWnNuWXEzdmVzQmJoSTVYQWhDY2xNUVR4b0k2RDhUNTZEWmNEY04KZ
    Gx3bkVJamFMV205aE5XMXlPQ0EvUXFVCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
# the actual addresses of the api endpoints are platform specific, so we can't rely on
# kuttl asserts to check them. This short script gathers the addresses and checks that
# the two endpoints are defined and their addresses follow the default pattern
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      . $PLACEMENT_KUTTL_DIR/../lib/helper_functions.sh
      apiEndpoints=$(oc get -n $NAMESPACE KeystoneEndpoint placement -o go-template-file=$PLACEMENT_KUTTL_DIR/../go_templates/apiEndpoints.gotemplate)
      assert_regex $apiEndpoints 'http:\/\/placement-internal\..+\.svc.*'
      assert_regex $apiEndpoints 'http:\/\/placement-public\..+\.svc.*'

      # Verify if the TLS secret is mounted correctly
      tlsMounted=$(oc get pod -l service=placement -o jsonpath='{.items[0].spec.volumes[?(@.name=="tls-vol")].secret.secretName}')
      if [ "$tlsMounted" != "tls-certificates" ]; then
        echo "TLS secret not mounted correctly."
        exit 1
      fi

      # when using image digests the containerImage URLs are SHA's so we verify them with a script
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment placement-operator-controller-manager -o go-template="$tupleTemplate")
      # format of imageTuple is: RELATED_IMAGE_PLACEMENT_<service>#<image URL with SHA> separated by newlines
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_PLACEMENT_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          template='{{.spec.containerImage}}'
          case $NAME in
            API)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE placementapi placement -o go-template="$template")
              ;;
          esac
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image does not equal $VALUE"
            exit 1
          fi
        fi
      done
